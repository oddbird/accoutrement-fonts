// Internal Font Helpers
// =====================

$_font-style-options: 'italic' 'oblique';
$_font-weight-options: '100' '200' '300' '400' '500' '600' '700' '800' '900' 'bold' 'bolder' 'lighter';
$_font-format-options: (
  'ttf': 'truetype',
  'otf': 'opentype',
  'woff': 'woff',
  'woff2': 'woff2',
  'svg': 'svg',
  'svgz': 'svg',
  'eot': 'embedded-opentype',
);


// Font Get
// --------
/// Get a font from the `$fonts` map.
/// @access private
@function _font-get(
  $key
) {
  $font: map-get($fonts, $key);

  @if not $font {
    @error '#{$key} is not defined in your `$fonts` configuration map.';
  } @else if map-has-key($fonts, $font) {
    $font: _font-get($font);
  }

  @return $font;
}


// Font Src
// --------
/// Get the font `src` value for a given font path and format.
/// @access private
/// @param {string | map} $path -
///   Path to the font files (leaving off the file format indicator),
///   or data-uri for font-src.
/// @param {string} $format -
///   Short-form (e.g. 'eot' or 'otf') of font format to import.
/// @param {string} $suffix [''] -
///   SVG or EOT suffix to be added to font src url.
@function _font-src(
  $path,
  $format,
  $suffix: ''
) {
  $format-name: map-get($_font-format-options, $format);
  $url: '';

  @if str-index($path, 'data:') {
    $url: url($path);
  } @else {
    $url: font-url($path + '.' + $format + $suffix);
  }

  @return $url format($format-name);
}


// Font Src List
// -------------
/// Build a `src` list
/// for one `@font-face` declaration block.
/// @access private
/// @param {string | map} $path -
///   Path to the font files (leaving off the file format indicator),
///   or map of format/path pairs.
/// @param {List} $formats [$font-formats] -
///   The font formats (e.g. 'ttf', 'otf', 'woff') to import.
///   Font files will be imported in the order given.
/// @param {string} $svgid [null] -
///   Optional SVG ID suffix.
///   If none is given, font `$name` will be used as fallback.
/// @param {bool} $ie-fix [false] -
///   Optionally add `'?#iefix'` suffix to eot src.
@function _font-src-list(
  $path,
  $formats: $font-formats,
  $svgid: null,
  $ie-fix: false,
  $local: ()
) {
  $src: ();

  @each $format in $formats {
    $item: ();

    @if ($format == 'local') {
      @each $name in $local {
        $item: append($item, local($name), 'comma');
      }

      $src: join($src, $item, 'comma');
    } @else {
      $url: '';
      $suffix: '';

      @if ($format == 'eot') and $ie-fix {
        $suffix: '?#iefix';
      } @else if index(('svg', 'svgz'), $format) {
        $suffix: '#' + $svgid;
      }

      @if (type-of($path) == 'map') {
        $url: map-get($path, $format);
      } @else {
        $url: $path;
      }

      $item: _font-src($url, $format, $suffix);
      $src: append($src, $item, 'comma');
    }
  }

  @return $src;
}


// Font Get Formats
// ----------------
/// Return explicit formats list,
/// with fallback to formats defined in data,
/// or (finally) global defined `$font-formats`.
/// @access private
/// @param {string | map} $path -
///   Path to the font files (leaving off the file format indicator),
///   or map of format/path pairs.
/// @param {List} $formats [null] -
///   Explicit font formats (e.g. 'ttf', 'otf', 'woff') to import.
@function _font-get-formats(
  $path,
  $formats: null,
  $fallback: $font-formats
) {
  $has-formats: (type-of($path) == 'map');
  $formats: $formats or if($has-formats, map-keys($path), $fallback);

  @return $formats;
}


// Font Get Variants
// -----------------
/// Find all the variant key/path pairs,
/// and return a filtered map including only font-variants.
/// @access private
/// @param {map} $font -
///   A map of data for one font
@function _font-get-variants(
  $font
) {
  $var-options: join($_font-style-options, $_font-weight-options);
  $var-options: join($var-options, ('normal', 'regular'));
  $variants: ();

  @each $key, $value in $font {
    $first: nth($key, 1);

    @if index($var-options, '' + $first) {
      $variants: map-merge($variants, ($key: $value));
    }
  }

  @return $variants;
}


// Parse Font Variant
// -------------------
/// Parse a list of font variants into a map of styles and weights.
/// @access private
/// @param {List} $variant -
///   A list of font variants, such as `('bold', 'italic')`.
/// @return {$map} -
///   A map of `style` and `weight` values.
@function _parse-font-variant(
  $variant
) {
  $return: (
    'style': 'normal',
    'weight': 'normal',
  );

  @each $item in $variant {
    @if index($_font-style-options, $item) {
      $return: map-merge($return, ('style': $item));
    } @else if index($_font-weight-options, '' + $item) {
      $return: map-merge($return, ('weight': $item));
    }
  }

  @return $return;
}


// Import Font-Face [mixin]
// ------------------------
/// A wrapper utility for the CSS `@font-face` block.
/// @access private
/// @param {string} $name -
///   The font name.
/// @param {string | map} $path -
///   Path to the font files (leaving off the file format indicator),
///   or map of format/path pairs.
/// @param {string | list} $variant [('normal', 'normal')] -
///   The font-style and font-weight properties.
/// @param {list} $formats [null] -
///   Optional list of font formats (e.g. 'ttf', 'otf', 'woff') to import,
///   in the order given.
///   If formats are not explicitly given here,
///   we fallback to formats in a path-map (if defined),
///   or the global `$font-formats` setting.
/// @param {string} $svgid [null] -
///   Optional SVG ID suffix.
///   If none is given, font `$name` will be used as fallback.
@mixin _import-font-face(
  $name,
  $path,
  $variant: ('normal', 'normal'),
  $formats: null,
  $svgid: null,
  $local: $name
) {
  $variant: _parse-font-variant($variant);
  $formats: _font-get-formats($path, $formats);
  $svgid: $svgid or $name;
  $src: _font-src-list($path, $formats, $svgid, 'iefix', $local);

  @font-face {
    font-family: quote($name);
    font-style: unquote(map-get($variant, 'style'));
    font-weight: unquote(map-get($variant, 'weight'));

    @if index($formats, 'eot') {
      // IE9 compat mode (eot)
      src: _font-src-list($path, 'eot');
    }

    // IE6-IE8 (eot) - with '?#iefix'
    // Modern Browsers (woff, woff2)
    // Safari, Android, iOS (ttf, otf)
    // Legacy iOS (svg, svgz) - with '#svgName'
    src: $src;
  }
}
