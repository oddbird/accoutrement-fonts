// Internal Font Helpers
// =====================

$_font-style-options: (
  'italic',
  'oblique',
);

$_font-weight-options: (
  '100',
  '200',
  '300',
  '400',
  '500',
  '600',
  '700',
  '800',
  '900',
  'bold',
  'bolder',
  'lighter',
);

$_font-format-options: (
  'local': null,
  'ttf': 'truetype',
  'otf': 'opentype',
  'woff': 'woff',
  'woff2': 'woff2',
  'svg': 'svg',
  'svgz': 'svg',
  'eot': 'embedded-opentype',
);


// Font Get
// --------
/// Get a font from the `$fonts` map.
/// @access private
@function _font-get(
  $key
) {
  $font: map-get($fonts, $key);

  @if not $font {
    @error '#{$key} is not defined in your `$fonts` configuration map.';
  } @else if map-has-key($fonts, $font) {
    $font: _font-get($font);
  }

  @return $font;
}


// Font URL
// --------
@function _font-url(
  $path,
  $format,
  $svgid: null
) {
  // some formats need no adjustments
  @if ($format == 'local') or str-index($path, 'data:') {
    @return $path;
  }

  // add file format when needed
  $ext: '.' + $format;
  $ext: if(str-index($path, $ext), '', $ext);

  // add svgid when needed
  $id: str-index($format, 'svg') and $svgid and not str-index($path, '#');
  $suffix: if($id, '#' + $svgid, '');

  // compile and return
  @return $path + $ext + $suffix;
}


// Font Src
// --------
/// Get the font `src` value for a given font path and format.
/// @access private
/// @param {string | map} $path -
///   Path to the font files (leaving off the file format indicator),
///   or data-uri for font-src.
/// @param {string} $format -
///   Short-form (e.g. 'eot' or 'otf') of font format to import.
/// @param {string} $suffix [''] -
///   SVG or EOT suffix to be added to font src url.
@function _font-src(
  $path,
  $format,
  $suffix: null
) {
  $format-name: map-get($_font-format-options, $format);
  $format-name: if($format-name, format($format-name), null);

  $path: _font-url($path, $format);
  $suffix: $suffix or '';
  @return font-url($path + $suffix) $format-name;
}


// Font Src List
// -------------
/// Build a `src` list
/// for one `@font-face` declaration block.
/// @access private
/// @param {map} $data -
///   Normalized map of format/url pairs to import.
@function _font-src-list(
  $data
) {
  $src: ();

  @each $format, $url in $data {
    $item: ();

    @if ($format == 'local') {
      @each $name in $url {
        $li: local($name);
        $item: append($item, $li, 'comma');
      }
    } @else {
      $li: _font-src($url, $format);
      $item: append($item, $li, 'comma');
    }

    $src: join($src, $item, 'comma');
  }

  @return $src;
}


// Font Get Variants
// -----------------
/// Find all the variant key/data pairs,
/// and return a filtered map including only font-variants.
/// @access private
/// @param {map} $font -
///   A map of data for one font
@function _font-get-variants(
  $font
) {
  $var-options: join($_font-style-options, $_font-weight-options);
  $var-options: append($var-options, 'normal');
  $variants: ();

  @each $key, $value in $font {
    // get the first setting, and make sure it's a string…
    $first: '' + nth($key, 1);

    // if it's a variant, add it to the list…
    @if index($var-options, $first) {
      $variants: map-merge($variants, ($key: $value));
    }
  }

  @return $variants;
}


// Parse Variant Name
// ------------------
/// Parse a list of font variants into a map of styles and weights.
/// @access private
/// @param {List} $variant -
///   A list of font variants, such as `('bold', 'italic')`.
/// @return {$map} -
///   A map of `style` and `weight` values.
@function _parse-variant-name(
  $variant
) {
  $return: (
    'style': 'normal',
    'weight': 'normal',
  );

  @each $item in $variant {
    @if index($_font-style-options, $item) {
      $return: map-merge($return, ('style': $item));
    } @else if index($_font-weight-options, '' + $item) {
      $return: map-merge($return, ('weight': $item));
    }
  }

  @return $return;
}


// Normalize Variant Data
// ----------------------
@function _normalize-variant-data(
  $data,
  $formats: ()
) {
  @if (type-of($data) == 'string') {
    $data: (
      'path': $data
    )
  }

  // Interpolate implicit paths
  $path: map-get($data, 'path');
  $svgid: map-get($data, 'svgid');
  $implicit: ();

  @if $path {
    @if (length($formats) > 0) {
      @each $format in $formats {
        $url: _font-url($path, $format, $svgid);
        $implicit: map-merge($implicit, ($format: $url));
      }
    } @else {
      @return 'format-error';
    }
  }

  // Extract explicit paths
  $explicit: ();

  @each $key, $value in $data {
    @if map-has-key($_font-format-options, $key) {
      $url: _font-url($value, $key, $svgid);
      $explicit: map-merge($explicit, ($key: $url));
    }
  }

  // Merge twice to get proper order and overrides…
  $implicit: map-merge($explicit, $implicit);
  @return map-merge($implicit, $explicit);
}



// Import Font-Face [mixin]
// ------------------------
/// A wrapper utility for the CSS `@font-face` block.
/// @access private
/// @param {string} $name -
///   The font name.
/// @param {string | list} $variant -
///   The font-style and font-weight properties.
/// @param {string | map} $data -
///   Path to the font files (leaving off the file format indicator),
///   or map of format/path pairs.
/// @param {list} $formats [null] -
///   Optional list of font formats (e.g. 'ttf', 'otf', 'woff') to import,
///   in the order given.
///   If formats are not explicitly given here,
///   we fallback to formats in a data-map.
/// @param {string} $svgid [null] -
///   Optional SVG ID suffix.
///   If none is given, font `$name` will be used as fallback.
@mixin _import-font-face(
  $name,
  $variant,
  $data,
  $formats: ()
) {
  $variant: _parse-variant-name($variant);
  $data: _normalize-variant-data($data, $formats);

  @if ($data == 'format-error') {
    @error '(#{$name}) Font-path interpolation ' +
    'requires a list of `formats` to import.';
  }

  @font-face {
    font-family: quote($name);
    font-style: unquote(map-get($variant, 'style'));
    font-weight: unquote(map-get($variant, 'weight'));

    $eot: map-get($data, 'eot');
    @if $eot {
      // IE9 compat mode (eot)
      src: _font-src($eot, 'eot', '?#iefix');
    }

    // IE6-IE8 (eot) - with '?#iefix'
    // Modern Browsers (woff, woff2)
    // Safari, Android, iOS (ttf, otf)
    // Legacy iOS (svg, svgz) - with '#svgName'
    src: _font-src-list($data);
  }
}
