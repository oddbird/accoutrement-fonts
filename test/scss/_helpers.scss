// Test Font Helpers
// =================


// Font Get
// --------
@include describe('Font Get [function]') {
  $expect: map-get($fonts, 'body-font');

  @include it('Get a font directly') {
    @include assert-equal(
      _font-get('body-font'),
      $expect,
      'Returns a map based on font config key');
  }

  @include it('Get a font by alias') {
    @include assert-equal(
      _font-get('kevin bacon'),
      $expect,
      'Returns a map based on recursive font config key');
  }
}


// Font Name
// ---------
@include describe('Font Name [function]') {
  @include it('Get a font directly') {
    @include assert-equal(
      _font-name('TestFont'),
      'TestFont',
      'Returns the given key if acts as a font name');
  }

  @include it('Get a font by alias') {
    @include assert-equal(
      _font-name('kevin bacon'),
      'Source Sans Pro',
      'Finds the font-name through alias and explicit name properties');
  }
}


// Font URL
// --------
@include describe('_Font URL [function]') {
  @include it('Returns base64 data with no changes') {
    $data: 'data:application/x-font-woff;charset=utf-8;base64...';
    @include assert-equal(
      _font-url($data, 'woff'),
      $data
    );
  }

  @include it('Returns local names with no changes') {
    $local: 'this' 'and that';
    @include assert-equal(
      _font-url($local, 'local'),
      $local
    );
  }

  @include it('Adds file format extension when needed') {
    @include assert-equal(
      _font-url('this-file', 'ttf'),
      'this-file.ttf'
    );

    @include assert-equal(
      _font-url('this-file.ttf', 'ttf'),
      'this-file.ttf',
      'no change when extension is provided'
    );
  }

  @include it('Adds svgid when needed') {
    @include assert-equal(
      _font-url('this-file', 'svgz', 'myID'),
      'this-file.svgz#myID'
    );

    @include assert-equal(
      _font-url('this-file.svg', 'svg', '#myID'),
      'this-file.svg#myID'
    );

    @include assert-equal(
      _font-url('this-file', 'ttf', 'myID'),
      'this-file.ttf',
      'no change when wrong file type'
    );

    @include assert-equal(
      _font-url('this-file.svg#myOtherID', 'svg', 'myID'),
      'this-file.svg#myOtherID',
      'no change when hash exists'
    );
  }
}


// Font Src
// --------
@include describe('Font Src [function]') {
  @include it('Builds a src-list item based on path interpolation') {
    @include assert-equal(
      _font-src('myfont', 'eot'),
      font-url('myfont.eot?') format('embedded-opentype')
    );
  }

  @include it('Builds a src-list item based on explicit path') {
    @include assert-equal(
      _font-src('myfont.eot?', 'eot'),
      font-url('myfont.eot?') format('embedded-opentype')
    );
  }

  @include it('Builds a src-list item based on dara-uri') {
    @include assert-equal(
      _font-src('data:application/font-ttf;charset=utf-8;base64,d09GMgABAAA', 'ttf'),
      url('data:application/font-ttf;charset=utf-8;base64,d09GMgABAAA') format('truetype')
    );
  }
}


// Font Src List
// -------------
@include describe('Font Src List [function]') {
  @include it('Builds a `src` list from variant data') {
    $variant: (
      'local': 'source-sans-pro-bold' 'Source Sans Pro bold',
      'woff2': 'sourcesanspro-bold-webfont.woff2',
      'woff': 'data:application/x-font-woff;charset=utf-8;base64...',
      'eot': 'sourcesanspro-bold-webfont',
    );

    $src: (
      url('../fonts/sourcesanspro-bold-webfont.eot?') format('embedded-opentype'),
      local('source-sans-pro-bold'),
      local('Source Sans Pro bold'),
      url('../fonts/sourcesanspro-bold-webfont.woff2') format('woff2'),
      url('data:application/x-font-woff;charset=utf-8;base64...') format('woff'),
    );

    @include assert-equal(
      _font-src-list($variant),
      $src
    );
  }
}



// Font Get Variants
// -----------------
@include describe('Font Get Variants [function]') {
  @include it('Filters a map to include only valid font-variant keys') {
    $test: (
      'name': 'anything',
      'rando': 2,
      'normal': 'something',
      'bold' 'italic': ('woff': 'path', 'ttf': 'path'),
      '400': 'path-to-font',
      200: 'path-to-font',
    );

    $expect: (
      'normal': 'something',
      'bold' 'italic': ('woff': 'path', 'ttf': 'path'),
      '400': 'path-to-font',
      200: 'path-to-font',
    );

    @include assert-equal(
      _font-get-variants($test),
      $expect
    );
  }
}



// Parse Variant Name
// ------------------
@include describe('Parse Variant Name [function]') {
  @include it('Single variant') {
    $expect: (
      'style': 'normal',
      'weight': 'bold',
    );

    @include assert-equal(
      _parse-variant-name('bold'),
      $expect
    );
  }

  @include it('Weight as string') {
    $expect: (
      'style': 'normal',
      'weight': '200',
    );

    @include assert-equal(
      _parse-variant-name('200'),
      $expect
    );
  }

  @include it('Multiple variants') {
    $expect: (
      'style': 'italic',
      'weight': 500,
    );

    @include assert-equal(
      _parse-variant-name(500 'italic'),
      $expect
    );
  }
}


// Normalize Variant Data
// ----------------------
@include describe('Normalize Variant Data [function]') {
  @include it('Errors with path but no formats') {
    @include assert-equal(
      _normalize-variant-data(
        $data: 'my/path',
        $formats: ()
      ),
      'format-error'
    );
  }

  @include it('Interpolates a string and formats') {
    @include assert-equal(
      _normalize-variant-data(
        $data: 'my/path',
        $formats: 'woff' 'ttf'
      ),
      (
        'woff': 'my/path.woff',
        'ttf': 'my/path.ttf',
      )
    );
  }

  @include it('Interpolates a map and formats') {
    @include assert-equal(
      _normalize-variant-data(
        $data: (
          'path': 'my/path',
          'svgid': 'myID',
        ),
        $formats: 'woff' 'svg'
      ),
      (
        'woff': 'my/path.woff',
        'svg': 'my/path.svg#myID',
      )
    );
  }

  @include it('Explicit settings override path & svgid') {
    $test: _normalize-variant-data(
      $data: (
        'path': 'my/path',
        'local': 'hello',
        'ttf': 'my/ttf/path',
        'svg': 'svg/path/to.svg#newID',
        'svgid': 'myID',
      ),
      $formats: 'woff' 'svg'
    );

    $expect: (
      'local': 'hello',
      'woff': 'my/path.woff',
      'ttf': 'my/ttf/path.ttf',
      'svg': 'svg/path/to.svg#newID',
    );

    @include assert-equal($test, $expect);
  }

  @include it('Leaves local list as-is') {
    @include assert-equal(
      _normalize-variant-data(
        $data: ('local': 'this' 'another')
      ),
      ('local': 'this' 'another')
    );
  }
}


// Import Font Face [mixin]
// ------------------------
@include describe('Import Font Face [mixin]') {
  @include it('Creates a font-face import interpolating path & format') {
    @include assert {
      @include output(false) {
        @include _import-font-face(
          $name: 'Source Sans Pro',
          $variant: 'bold',
          $data: 'path/to/myFont',
          $formats: 'woff' 'svg'
        );
      }

      @include expect(false) {
        @font-face {
          font-family: "Source Sans Pro";
          font-style: normal;
          font-weight: bold;
          src: url("../fonts/path/to/myFont.woff") format("woff"), url("../fonts/path/to/myFont.svg") format("svg");
        }
      }
    }
  }

  @include it('Alows local font src') {
    @include assert {
      @include output(false) {
        @include _import-font-face(
          $name: 'Source Sans Pro',
          $variant: 'bold',
          $data: (
            'local': 'this' 'another one',
            'woff': 'path/to/myFont',
          )
        );
      }

      @include expect(false) {
        @font-face {
          font-family: "Source Sans Pro";
          font-style: normal;
          font-weight: bold;
          src: local('this'), local('another one'), url("../fonts/path/to/myFont.woff") format("woff");
        }
      }
    }
  }

  @include it('Adds svgid when provided and needed') {
    @include assert {
      @include output(false) {
        @include _import-font-face(
          $name: 'Source Sans Pro',
          $variant: 'bold',
          $data: (
            'path': 'path/to/myFont',
            'svgid': 'myID',
          ),
          $formats: 'woff' 'svg'
        );
      }

      @include expect(false) {
        @font-face {
          font-family: "Source Sans Pro";
          font-style: normal;
          font-weight: bold;
          src: url("../fonts/path/to/myFont.woff") format("woff"), url("../fonts/path/to/myFont.svg#myID") format("svg");
        }
      }
    }
  }

  @include it('Explicit settings override implicit settings') {
    @include assert {
      @include output(false) {
        @include _import-font-face(
          $name: 'Source Sans Pro',
          $variant: 'bold',
          $data: (
            'path': 'path/to/myFont',
            'woff': 'different/to/myFont.woff',
          ),
          $formats: 'woff' 'svg'
        );
      }

      @include expect(false) {
        @font-face {
          font-family: "Source Sans Pro";
          font-style: normal;
          font-weight: bold;
          src: url("../fonts/different/to/myFont.woff") format("woff"), url("../fonts/path/to/myFont.svg") format("svg");
        }
      }
    }
  }

  @include it('Special handling for eot files') {
    @include assert {
      @include output(false) {
        @include _import-font-face(
          $name: 'Source Sans Pro',
          $variant: 'bold',
          $data: 'path/to/myFont',
          $formats: 'woff' 'eot'
        );
      }

      @include expect(false) {
        @font-face {
          font-family: "Source Sans Pro";
          font-style: normal;
          font-weight: bold;
          src: (
            url("../fonts/path/to/myFont.eot?") format("embedded-opentype"),
            url("../fonts/path/to/myFont.woff") format("woff")
          );
        }
      }
    }
  }
}
