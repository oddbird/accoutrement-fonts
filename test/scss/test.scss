// Arrow Tests
// ===========

@import '../../node_modules/sass-true/sass/true';
@import '../../sass/fonts';


// Font URL [function]
@include test-module('font-url [function]') {
  @include test('Prepend font folder to font path') {
    $test: font-url('myfont.woff');
    $expect: url('../fonts/myfont.woff');

    @include assert-equal($test, $expect,
      'Returns a full font-path with font-folder prepended.');
  }
}


// Name From Path [function]
@include test-module('_name-from-path [function]') {
  @include test('Access file name from path') {
    $test: _name-from-path('path/to/my-font.woff');
    $expect: 'my-font.woff';

    @include assert-equal($test, $expect,
      'Returns the file name from the end of a path.');
  }
}


// Parse Font [function]
@include test-module('_parse-font [function]') {
  @include test('Name only') {
    $test: _parse-font(my-font);
    $expect: (
      font-family: "my-font",
      font-style: null,
      font-weight: null,
      eot: null,
      src: (
        url('../fonts/my-font.woff') format('woff'),
        url('../fonts/my-font.ttf') format('truetype')
      ),
    );

    @include assert-equal($test, $expect,
      'Return a font-face map based on a name only.');
  }

  @include test('Name and normal (weight/style)') {
    $test: _parse-font(my-font normal);
    $expect: (
      font-family: "my-font",
      font-style: normal,
      font-weight: normal,
      eot: null,
      src: (
        url('../fonts/my-font.woff') format('woff'),
        url('../fonts/my-font.ttf') format('truetype')
      ),
    );

    @include assert-equal($test, $expect,
      'Return a font-face map based on a name and normal (weight/style).');
  }

  @include test('Name and bold/normal') {
    $test: _parse-font(my-font-bold bold normal);
    $expect: (
      font-family: "my-font-bold",
      font-style: normal,
      font-weight: bold,
      eot: null,
      src: (
        url('../fonts/my-font-bold.woff') format('woff'),
        url('../fonts/my-font-bold.ttf') format('truetype')
      ),
    );

    @include assert-equal($test, $expect,
      'Return a font-face map based on name and bold/normal.');
  }

  @include test('Path and bold/italic') {
    $test: _parse-font(path/to/my-font-bold-italic bold italic);
    $expect: (
      font-family: "my-font-bold-italic",
      font-style: italic,
      font-weight: bold,
      eot: null,
      src: (
        url('../fonts/path/to/my-font-bold-italic.woff') format('woff'),
        url('../fonts/path/to/my-font-bold-italic.ttf') format('truetype')
      ),
    );

    @include assert-equal($test, $expect,
      'Return a font-face map based on path and bold/italic.');
  }

  @include test('Name, path, svg') {
    $test: _parse-font(my-font path/to/my-font svg);
    $expect: (
      font-family: "my-font",
      font-style: null,
      font-weight: null,
      eot: null,
      src: (url('../fonts/path/to/my-font.svg#my-font') format('svg'),),
    );

    @include assert-equal($test, $expect,
      'Return a font-face map based on path, name, svg.');
  }

  // Override font-formats, set explicit svg-name
  // @include font-face(my-font eot svg #my-svg-name);
  @include test('Name, eot/svg, svg-name') {
    $test: _parse-font(my-font eot svg '#my-svg-name');
    $expect: (
      font-family: "my-font",
      font-style: null,
      font-weight: null,
      eot: url('../fonts/my-font.eot'),
      src: (
        url('../fonts/my-font.eot?#iefix') format('embedded-opentype'),
        url('../fonts/my-font.svg#my-svg-name') format('svg')
      ),
    );

    @include assert-equal($test, $expect,
      'Return a font-face map based on name, type, and svg-name.');
  }
}


@include report;
